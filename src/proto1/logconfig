#!/usr/bin/env python

# XXX the user gives us a PEM file for the public key, silly!

import os
import sqlite3
import sys

def create_tables(dbname):
    cxn = sqlite3.connect(dbname)
    cur = cxn.cursor()

    cur.execute('CREATE TABLE loginfo('
              + 'id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, '
              + 'log_id TEXT UNIQUE, ' # upper-hex-encoded log id
              + 'public_key TEXT, ' # upper-hex-encoded DER-formatted public key
              + 'audit_status TEXT, ' # 'F' for Failed-audit
              + 'url TEXT)')
    cur.close()
    cxn.commit()
    cxn.close()


def find_log_id(cur, log_id):
    stmt = 'SELECT * FROM loginfo WHERE log_id = ?'
    cur.execute(stmt, [log_id])
    recs = list(cur.fetchall())
    assert len(recs) < 2
    if len(recs) == 0:
        return None
    else:
        return recs[0][0]


def log_id_arg(cur, args):
    log_id = args.pop(0)
    if log_id[0] == '#':
        log_id = log_id[1:]
        stmt = 'SELECT * FROM loginfo WHERE id = ?'
        cur.execute(stmt, [log_id])
        recs = list(cur.fetchall())
        assert len(recs) < 2
        if len(recs) == 0:
            print >> sys.stderr, 'Log #%s was not found' % log_id
            sys.exit(1)
        return recs[0][1]

    if len(log_id) != 64:
        usage()
    return log_id.upper()

def configure_public_key(cur, args):
    if len(args) != 2:
        usage()
    log_id = log_id_arg(cur, args)
    public_key, = args
    rec_id = find_log_id(cur, log_id)
    if rec_id == None:
        stmt = 'INSERT INTO loginfo (log_id, public_key) VALUES(?, ?)'
        cur.execute(stmt, [log_id, public_key])
    else:
        stmt = 'UPDATE loginfo SET public_key = ? WHERE log_id = ?'
        cur.execute(stmt, [public_key, log_id])


def configure_url(cur, args):
    if len(args) != 2:
        usage()
    log_id = log_id_arg(cur, args)
    url, = args
    rec_id = find_log_id(cur, log_id)
    if rec_id == None:
        stmt = 'INSERT INTO loginfo (log_id, url) VALUES(?, ?)'
        cur.execute(stmt, [log_id, url])
    else:
        stmt = 'UPDATE loginfo SET url = ? WHERE log_id = ?'
        cur.execute(stmt, [url, log_id])


def forget_log(cur, args):
    if len(args) != 1:
        usage()
    log_id = log_id_arg(cur, args)
    rec_id = find_log_id(cur, log_id)
    if rec_id == None:
        print >> sys.stderr, "Log with id %s is not configured" % log_id
    stmt = 'DELETE FROM loginfo WHERE id = ?'
    cur.execute(stmt, [rec_id])


def trust_distrust_log(cur, args):
    if len(args) != 2:
        usage()
    log_id = log_id_arg(cur, args)
    flag, = args
    rec_id = find_log_id(cur, log_id)
    if rec_id == None:
        stmt = 'INSERT INTO loginfo (log_id, audit_status) VALUES(?, ?)'
        cur.execute(stmt, [log_id, flag])
    else:
        stmt = 'UPDATE loginfo SET audit_status = ? WHERE log_id = ?'
        cur.execute(stmt, [flag, log_id])


def trust_log(cur, args):
    trust_distrust_log(cur, args + ['T'])


def distrust_log(cur, args):
    trust_distrust_log(cur, args + ['F'])


def dump(cur, args):
    if len(args) != 0:
        usage()
    stmt = 'SELECT * FROM loginfo'
    cur.execute(stmt)
    for row in cur.fetchall():
        if row[2]:
            pubkey = row[2]
        else:
            pubkey = '(not configured)'
        if row[4]:
            url = row[4]
        else:
            url = '(not configured)'
        print 'Log entry:'
        print '  Record ' + str(row[0])
        print '  Id ' + row[1]
        print '  Public key ' + pubkey
        print '  URL ' + url
        print ''


def usage():
    print >> sys.stderr, 'Usage: %s /path/to/log-config-db command args'
    print >> sys.stderr, 'Commands:'
    print >> sys.stderr, '  dump                                                          display config-db contents'
    print >> sys.stderr, '  configure-public-key log-id /path/to/log-public-key.pem       configure public key'
    print >> sys.stderr, '  configure-url log-id http://www.example.com/path/             configure URL'
    print >> sys.stderr, '  trust log-id                                                  mark log as trusted (default)'
    print >> sys.stderr, '  distrust log-id                                               mark log as untrusted'
    print >> sys.stderr, '  forget log-id                                                 remove log from config-db'
    print >> sys.stderr, 'log-id can be one of the following:'
    print >> sys.stderr, '  log id in hex (64 chars)'
    print >> sys.stderr, '  #<record-number>, displayable with the dump command'
    sys.exit(1)


if len(sys.argv) < 3:
    usage()

dbname = sys.argv[1]
cmd = sys.argv[2]
args = sys.argv[3:]

if not os.path.exists(dbname):
    create_tables(dbname)

cxn = sqlite3.connect(dbname)
cur = cxn.cursor()

if cmd == 'configure-public-key':
    configure_public_key(cur, args)
elif cmd == 'configure-url':
    configure_url(cur, args)
elif cmd == 'distrust':
    distrust_log(cur, args)
elif cmd == 'trust':
    trust_log(cur, args)
elif cmd == 'forget':
    forget_log(cur, args)
elif cmd == 'dump':
    dump(cur, args)
else:
    usage()

cur.close()
cxn.commit()
cxn.close()
